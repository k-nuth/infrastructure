name: Conan

on: [push]

# env:
#   # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
#   BUILD_TYPE: Release

jobs:
  generate-matrix:
    name: Generate Job Matrix
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # - uses: actions/checkout@v2
      # - uses: actions/setup-python@v1
      #   with:
      #     python-version: "3.8"
      - name: Generate Job Matrix
        id: set-matrix
        env:
          splitByBuildTypes: ${{ env.splitByBuildTypes }}
          # MATRIX: '{"config": [{"name": "Linux GCC 10","compiler": "GCC","version": "10","os": "ubuntu-20.04"},{"name": "Linux GCC 9","compiler": "GCC","version": "9","os": "ubuntu-20.04"},{"name": "Linux GCC 8","compiler": "GCC","version": "8","os": "ubuntu-20.04"},{"name": "macOS Apple-Clang 12","compiler": "apple-clang","version": "12","os": "macos-11.0"}]}'
          # MATRIX: '{"config": [{"name": "macOS Apple-Clang 12","compiler": "apple-clang","version": "12","os": "macos-11.0"}]}'
          MATRIX: '{"config": [{"name": "macOS Apple-Clang 12","compiler": "apple-clang","version": "12","os": "macos-10.15"}]}'
          
        run: |
          echo "${MATRIX}"
          echo "::set-output name=matrix::${MATRIX}"

  conan:
    needs: generate-matrix
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    name: ${{ matrix.config.name }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-python@v1
        with:
          python-version: "3.8"          
  
      - name: Install Dependencies
        run: |
          chmod +x ci_utils/.travis/install.sh
          ./ci_utils/.travis/install.sh
        shell: bash
  
      - name: Install Conan
        env:
          BPT_MATRIX: ${{toJson(matrix.config)}}
        run: |
          matrix=$(echo ${BPT_MATRIX})
        shell: bash

      - name: Build
        env:
          # CONAN_GCC_VERSIONS: ${{ matrix.config.version }}
          # CONAN_DOCKER_IMAGE: conanio/gcc${{ matrix.config.version }}
          CONAN_APPLE_CLANG_VERSIONS: ${{ matrix.config.version }}.0
          CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
          CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
        shell: bash
        run: |
          echo ${CONAN_STABLE_BRANCH_PATTERN}
          echo ${CONAN_GCC_VERSIONS}
          echo ${CONAN_APPLE_CLANG_VERSIONS}
          echo ${CONAN_DOCKER_IMAGE}
          echo ${CONAN_LOGIN_USERNAME}
          chmod +x ci_utils/.travis/run.sh
          ./ci_utils/.travis/run.sh



  # conan:
  #   # The CMake configure and build commands are platform agnostic and should work equally
  #   # well on Windows or Mac.  You can convert this to a matrix build if you need
  #   # cross-platform coverage.
  #   # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: true
  #   - uses: actions/setup-python@v1
  #     with:
  #       python-version: "3.8"

  #   - name: Install Dependencies
  #     run: |
  #       chmod +x ci_utils/.travis/install.sh
  #       ./ci_utils/.travis/install.sh
  #     shell: bash

  #   - name: Build
  #     env:
  #       CONAN_GCC_VERSIONS: 10
  #       CONAN_DOCKER_IMAGE: conanio/gcc10
  #     # working-directory: ${{runner.workspace}}/build
  #     shell: bash
  #     # Execute the build.  You can specify a specific target with "--target <NAME>"
  #     run: |
  #       echo ${CONAN_STABLE_BRANCH_PATTERN}
  #       chmod +x ci_utils/.travis/run.sh
  #       ./ci_utils/.travis/run.sh

  #   # - name: Create Build Environment
  #   #   # Some projects don't allow in-source building, so create a separate build directory
  #   #   # We'll use this as our working directory for all subsequent commands
  #   #   run: cmake -E make_directory ${{runner.workspace}}/build

  #   # - name: Configure CMake
  #   #   # Use a bash shell so we can use the same syntax for environment variable
  #   #   # access regardless of the host operating system
  #   #   shell: bash
  #   #   working-directory: ${{runner.workspace}}/build
  #   #   # Note the current convention is to use the -S and -B options here to specify source 
  #   #   # and build directories, but this is only available with CMake 3.13 and higher.  
  #   #   # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
  #   #   run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

  #   # - name: Build
  #   #   working-directory: ${{runner.workspace}}/build
  #   #   shell: bash
  #   #   # Execute the build.  You can specify a specific target with "--target <NAME>"
  #   #   run: cmake --build . --config $BUILD_TYPE

  #   # - name: Test
  #   #   working-directory: ${{runner.workspace}}/build
  #   #   shell: bash
  #   #   # Execute tests defined by the CMake configuration.  
  #   #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #   #   run: ctest -C $BUILD_TYPE
